#include "so_long.h"
int ft_strcmp(char *s1, char *s2)
{
    int i = 0;
    while (s1[i] && s2[i])
    {
        if (s1[i] != s2[i])
            return 0;
        i++;
    }
    if (s1[i] || s2[i])
        return 0;
    return 1;
}
void ft_check_extension(char *str)
{
    int i;

    i = 0;
    while (str[i] && str[i] != '.')
        i++;
    if (!(ft_strcmp(".ber", str + i)))
    {
        write(1, "Error\nInvalid file format. Map file must have the '.ber' extension", 66);
        exit(1);
    }
}

char **ft_check_map(char **av)
{
    char **map;
    char **copy_map;
    int fd = open(av[1], O_RDONLY);

    int i = 0;

    char *s = get_next_line(fd);

    while (s)
    {
        i++;
        free(s);
        s = get_next_line(fd);
    }

    map = malloc(sizeof(char *) * (i + 1));
    copy_map = malloc(sizeof(char *) * (i + 1));
    fd = open(av[1], O_RDONLY);
    i = 0;
    map[0] = get_next_line(fd);

    while (map[i])
    {
        i++;
        map[i] = get_next_line(fd);
        if (map[i] && map[i][0] == '\n')
        {
            free(map[i]);
            i--;
        }
    }

    // printf("%c\n", map[5][0]);
    // printf("%d\n", i);
    int k = 0;
    int j = 0;

    while (map[k])
    {

        j = 0;
        copy_map[k] = malloc(ft_strlen(map[k]));
        while (map[k][j])
        {

            copy_map[k][j] = map[k][j];
            j++;
        }
        k++;
    }
    copy_map[k] = NULL;
    ft_process_map(map, copy_map, i);

    ft_free(map);
    return (copy_map);
}
void ft_process_map(char **map, char **copy_map, int row)
{
    int i = 0;
    int j = 0;
    int len;
    int player_counter = 0;
    int collectible = 0;
    int exit_counter = 0;

    while (map[i])
    {
        // printf("%d\n", i);

        if (i == 0 || i == row - 1)
        {
            j = 0;
            while (map[i][j])
            {
                if (map[i][j] != '1' && map[i][j] != '\n' && i != row - 1)
                {
                    ft_free(map);
                    ft_free(copy_map);
                    write(1, "Error\nYou need a wall, Right Now!", 33);
                    exit(1);
                }
                else if (i == row - 1 && map[i][j] != '1')
                {
                    ft_free(map);
                    ft_free(copy_map);
                    write(1, "Error\nYou need a wall, Right Now!", 33);
                    exit(1);
                }
                j++;
            }
        }
        else
        {

            if (map[i][0] != '1' || map[i][ft_strlen(map[i]) - 2] != '1')
            {
                ft_free(map);
                ft_free(copy_map);
                write(1, "Error\nFill the gap in this wall!", 32);
                exit(1);
            }
            j = 0;
            while (map[i][j])
            {
                if (map[i][j] == 'C')
                    collectible++;
                else if (map[i][j] == 'E')
                    exit_counter++;
                else if (map[i][j] == 'P')
                    player_counter++;
                else if (map[i][j] != '0' && map[i][j] != '1' && map[i][j] != '\n')
                {

                    ft_free(map);
                    ft_free(copy_map);
                    write(1, "Error\nInvalid element", 21);
                    exit(1);
                }
                j++;
            }
        }

        len = ft_strlen(map[i]) - 1;
        if (map[i + 1] && i + 1 != row - 1 && ft_strlen(map[i + 1]) - 1 != len)
        {
            write(1, "Error\nMap not rectangular", 25);
            ft_free(map);
            ft_free(copy_map);
            exit(1);
        }
        else if (map[i + 1] && i + 1 == row - 1 && ft_strlen(map[i + 1]) != len)
        {
            write(1, "Error\nMap not rectangular", 25);
            ft_free(map);
            ft_free(copy_map);
            exit(1);
        }
        i++;
    }
    if (player_counter != 1 || !collectible || exit_counter != 1)
    {
        ft_free(map);
        ft_free(copy_map);
        write(1, "Error\nInvalid characters", 24);
        exit(1);
    }
    // printf("%d\n", i);

    if (!ft_valid_path(map))
    {
        ft_free(map);
        ft_free(copy_map);
        write(1, "Error\nThere's no valid path to the exit", 39);
        exit(1);
    }
    write(1, "Valid Map\n", 10);
}

int handle(int key, struct data *data)
{
    int a, b;
    if (key == 2)
    {
        if (data->map[data->y_p / 50][data->x_p / 50 + 1] == '1')
        {
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
            return 0;
        }
        if (data->map[data->y_p / 50][data->x_p / 50 + 1] == 'C')
        {
            data->collect--;
            if (data->collect == 0)
            {
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/o_exit.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_e, data->y_e);
            }
            if (data->map[data->y_p / 50][data->x_p / 50 + 1] == 'E')
            {
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                    mlx_destroy_window(data->mlx_ptr, data->win_ptr);
                }
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/floor.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p + 50, data->y_p);
            data->x_p += 50;
        }
        if (key == 0)
        {
            if (data->map[data->y_p / 50][data->x_p / 50 - 1] == '1')
            {
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/left.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            if (data->map[data->y_p / 50][data->x_p / 50 - 1] == 'C')
            {
                data->collect--;
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/o_exit.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_e, data->y_e);
                }
            }
            if (data->map[data->y_p / 50][data->x_p / 50 - 1] == 'E')
            {
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                    mlx_destroy_window(data->mlx_ptr, data->win_ptr);
                }
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/left.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/floor.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/left.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p - 50, data->y_p);
            data->x_p -= 50;
        }
        if (key == 13)
        {
            if (data->map[data->y_p / 50 - 1][data->x_p / 50] == '1')
            {
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/back.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            if (data->map[data->y_p / 50 - 1][data->x_p / 50] == 'C')
            {
                data->collect--;
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/o_exit.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_e, data->y_e);
                }
            }
            if (data->map[data->y_p / 50 - 1][data->x_p / 50] == 'E')
            {
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/back.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                    mlx_destroy_window(data->mlx_ptr, data->win_ptr);
                }
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/back.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/floor.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/back.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p - 50);
            data->y_p -= 50;
        }
        if (key == 1)
        {
            if (data->map[data->y_p / 50 + 1][data->x_p / 50] == '1')
            {
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/front.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            if (data->map[data->y_p / 50][data->x_p / 50 - 1] == 'C')
            {
                data->collect--;
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/o_exit.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_e, data->y_e);
                }
            }
            if (data->map[data->y_p / 50][data->x_p / 50 - 1] == 'E')
            {
                if (data->collect == 0)
                {
                    data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/right.xpm", &a, &b);
                    mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                    mlx_destroy_window(data->mlx_ptr, data->win_ptr);
                }
                data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/left.xpm", &a, &b);
                mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
                return 0;
            }
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/floor.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p);
            data->img = mlx_xpm_file_to_image(data->mlx_ptr, "./img/front.xpm", &a, &b);
            mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->img, data->x_p, data->y_p + 50);
            data->y_p += 50;
        }

        return 0;
    }

    int main(int argc, char **argv)
    {
        t_data vars;
        vars.mlx_ptr = mlx_init();

        if (argc != 2)
        {
            write(1, "Usage : ./so_long <map.ber>", 27);
            return (1);
        }
        ft_check_extension(argv[1]);

        vars.map = ft_check_map(argv);
        int i = 0;
        int j = 0;

        ft_get_dimensions(&i, &j, vars.map);
        printf("%d %d\n", i, j);
        vars.height = i;
        vars.width = j;
        vars.win_ptr = mlx_new_window(vars.mlx_ptr, vars.width * 50, vars.height * 50, "so_long");
        ft_render(&vars);
        // printf("%d %d\n", vars.y_p, vars.x_p);

        // mlx_key_hook(vars.win_ptr, handle, &vars);
        mlx_hook(vars.win_ptr, 2, 1L << 0, handle, &vars);
        mlx_loop(vars.mlx_ptr);
        return 0;
    }